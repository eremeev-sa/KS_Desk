import React, { useState } from 'react';
import Tasks from './Tasks'; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
import { ColumnRequest } from '../../services/Column'; // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
import { Draggable } from 'react-beautiful-dnd'; // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Drag-and-Drop
import styled from 'styled-components'; // –î–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { colors } from '@atlaskit/theme'; // –¶–≤–µ—Ç–æ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
import { TaskUpdateRequest } from '../../services/Task'; // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏

interface HeaderProps {
    isDragging: boolean; // –§–ª–∞–≥, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–π, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
}

const Container = styled.div`
  margin: 0px;
  display: flex;
  flex-direction: column;
`;

const Header = styled.div<HeaderProps>`
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 20px;
    background-color: ${({ isDragging }) =>
        isDragging ? colors.Y75 : '#f4f5f6'}; // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    transition: background-color 0.2s ease;
    &:hover {
      background-color: #ffffff;
    }
  `;

type ColumnProps = {
    id: string; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–æ–Ω–∫–∏
    name: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    index: number; // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
    tasks: { // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        id: string;
        name: string;
        description: string;
        priority: string;
        columnId: string;
        assigneeId: string;
    }[];

    handleTaskUpdate: (id: string, taskRequest: TaskUpdateRequest) => void; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    handleTaskLocalUpdate: () => void; // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    onDelete: (id: string) => void; // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    onUpdate: (id: string, columnRequest: ColumnRequest) => void; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
};

const Column: React.FC<ColumnProps> = ({ id, name, index, onDelete, onUpdate, tasks, handleTaskUpdate, handleTaskLocalUpdate }) => {
    const [isEditing, setIsEditing] = useState(false); // –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const [tempName, setTempName] = useState(name); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleEditClick = () => {
        setIsEditing(true);
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
    const handleSaveClick = () => {
        const columnRequest = { id: id, name: tempName };
        onUpdate(id, columnRequest);
        setIsEditing(false); // –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    };
    
    // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
    const handleCancelClick = () => {
        setTempName(name); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
        setIsEditing(false); // –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    };

    return (
        <Draggable draggableId={id} index={index} key={id}>
            {(provided, snapshot) => (
                <Container ref={provided.innerRef} {...provided.draggableProps}>
                    <div className="ms-4">
                        <div className="card">
                            <div className='kanban-column'>
                                <div className="custom-card-header text-center d-flex">
                                    {isEditing ? (
                                        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                        <>
                                            <input
                                                title="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏"
                                                type="text"
                                                className="form-control column me-2"
                                                value={tempName}
                                                onChange={(e) => setTempName(e.target.value)}
                                            />
                                            <div className="button-container d-flex align-items-center">
                                                <button
                                                    className="btn btn-accept btn-sm me-2"
                                                    style={{ flexShrink: 0 }}
                                                    onClick={handleSaveClick}
                                                >
                                                    ‚úî
                                                </button>
                                                <button
                                                    className="btn btn-cancel btn-sm"
                                                    style={{ flexShrink: 0 }}
                                                    onClick={handleCancelClick}
                                                >
                                                    ‚úñ
                                                </button>
                                            </div>
                                        </>
                                    ) : (
                                        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
                                        <div className="d-flex w-100">
                                            <Header isDragging={snapshot.isDragging}>
                                                {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ */}
                                                <div
                                                    {...provided.dragHandleProps}
                                                    className="drag-handle center"
                                                >
                                                    ‚ú•
                                                </div>
                                            </Header>

                                            <div
                                                style={{
                                                    fontWeight: 'bold',
                                                    margin: '8px',
                                                }}
                                            >
                                                <span
                                                    className="text-container noselect"
                                                    onDoubleClick={handleEditClick} // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                                >
                                                    {name}
                                                </span>
                                            </div>

                                            <div className="button-container d-flex align-items-center ms-auto">
                                                <button
                                                    className="btn btn-delete btn-sm"
                                                    onClick={() => onDelete(id)}
                                                >
                                                    üóë
                                                </button>
                                            </div>
                                        </div>

                                    )}
                                </div>
                                {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á */}
                                <div className="card-body">
                                    <Tasks tasks={tasks} handleTaskUpdate={handleTaskUpdate} handleTaskLocalUpdate={handleTaskLocalUpdate} columnId={id} />
                                </div>
                            </div>
                        </div>
                    </div>
                </Container>
            )}
        </Draggable>
    )
};


export default Column;
